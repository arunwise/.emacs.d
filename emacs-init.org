#+TITLE: Emacs Configuration
#+AUTHOR: Arun

This configuration is largely based on the one used by [[https://gitlab.com/protesilaos/dotfiles][Protesilaos
Stavrou]]. Large chunks have been liberally copied from there.
* Setup use-package

#+begin_src emacs-lisp
;; Setup `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Should set before loading `use-package'
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t))

(eval-when-compile
  (require 'use-package))
#+end_src

* Custom.el

#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :config
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file))
#+END_SRC

* Uniquify

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))
#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp
(use-package ivy
    :ensure t
    :config
    (ivy-mode 1)
    ;;(setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC

* Swiper

#+BEGIN_SRC emacs-lisp
(use-package swiper
    :ensure t
    :after ivy)
#+END_SRC

* GUI
Laptop preferred fonts (at 1680x1050 resolution):
- =Inconsolata-12=
- =SF Mono-12=
4K monitor preferred fonts (at 3360x1890 scaled resolution):
- =Inconsolata-13.5=
- =SF Mono-12=
#+BEGIN_SRC emacs-lisp
(use-package emacs
    :init
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (line-number-mode 1)
    (column-number-mode 1)
    (show-paren-mode 1)
    :config
    (defconst laptop-font "SF Mono-12:weight=regular")
    (defconst 4kmonitor-font "SF Mono-12:weight=regular")
    (defun set-font-based-on-monitor ()
      (interactive)
      (when window-system
	(if (<= (display-pixel-width) 1680)
	    (set-frame-font laptop-font)
	  (set-frame-font 4kmonitor-font))))
    (setq inhibit-splash-screen t)	
    (setq show-paren-delay 0)
    (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
    (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
    :hook (after-init . set-font-based-on-monitor))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

* Org
** Basics
#+BEGIN_SRC emacs-lisp
(use-package org
    :config
    ;;agenda and notes
    (setq org-directory "~/org-files")
    (setq org-default-notes-file "~/org-files/notes.org")
    (setq org-agenda-files '("~/org-files/agenda.org"))
    ;; refile
    (setq org-refile-targets
        '((org-agenda-files . (:maxlevel . 2))
	(nil . (:maxlevel . 2))))
    ;; don't want to refile under TODO entries
    (defun refile-target-predicate ()
      (not (nth 2 (org-heading-components))))
    (setq org-refile-target-verify-function 'refile-target-predicate)
    (setq org-todo-keywords
        '((sequence "TODO(t)" "BLOCKED(b)" "|" "DONE(d)" "CANCELED(c)" "SOMEDAY(s)")
	(sequence "BACKLOG(g)" "IMPLEMENTATION-PLAN(i)" "PROGRESS(p)" "REVIEW(r)" "|" "CLOSED(l)")))
    :bind ("C-c l" . org-store-link))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(use-package org-capture
    :after org
    :config
    (setq org-capture-templates
        '(("t" "Todo" entry (file+headline "~/org-files/notes.org" "Tasks")
        "* TODO %?\n  %i\n  %a")
	("n" "Note" entry (file+headline "~/org-files/notes.org" "Notes")
	"* %? :NOTE:\n%U")))
    :bind ("C-c c" . org-capture))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-agenda
    :after org
    :config
    (setq org-agenda-confirm-kill t)
    (setq org-agenda-show-all-dates t)
    :bind (("C-c a" . org-agenda)
        :map org-mode-map
        ("C-'" . nil)
        ("C-," . nil)))
#+END_SRC

** Source blocks
#+BEGIN_SRC emacs-lisp
(use-package org-src
    :after org
    :config
    (setq org-src-window-setup 'current-window)
    (setq org-src-fontify-natively t)
    (setq org-src-preserve-indentation t)
    (setq org-src-tab-acts-natively t)
    (setq org-edit-src-content-indentation 0))
#+END_SRC

* Latex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :ensure t
  :config
  (setenv "PATH" (concat "/Library/TeX/texbin:"
			 (getenv "PATH")))
  (add-to-list 'exec-path "/Library/TeX/texbin"))
#+END_SRC

* Elpy
#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable))
#+END_SRC
* Python-docstring
#+BEGIN_SRC emacs-lisp
(use-package python-docstring
  :ensure t
  :hook (python-mode . python-docstring-mode))
#+END_SRC
* Ivy-bibtex
#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t
  :config
  (setq bibtex-completion-bibliography
	'("~/bibliography/bibliography.bib"))
  (setq bibtex-completion-library-path
	'("~/bibliography/files"))

  (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)
    (let ((bibtex-completion-pdf-open-function
	   (lambda (fpath) (start-process "skim" "*ivy-bibtex-skim*" "open" "-a" "Skim" fpath))))
      (bibtex-completion-open-pdf keys fallback-action)))

  (ivy-bibtex-ivify-action bibtex-completion-open-pdf-external ivy-bibtex-open-pdf-external)

  (ivy-add-actions
   'ivy-bibtex
   '(("P" ivy-bibtex-open-pdf-external "Open PDF file in external viewer (if present)")))
  :bind ("s-b" . ivy-bibtex))
#+END_SRC

* Ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :config
  :bind (("C-x C-b" . ibuffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ibuffer-projectile
  :ensure t
  :after ibuffer
  :config
  (defun ibuffer-projectile-groups ()
    (ibuffer-projectile-set-filter-groups)
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic)
      (ibuffer-do-sort-by-major-mode)))
  :hook (after-init . ibuffer-projectile-groups))
#+END_SRC

* Counsel-projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :hook (after-init . counsel-projectile-mode)
  :bind ("s-p" . projectile-command-map))
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
(use-package modus-operandi-theme
  :ensure t)
#+END_SRC

* Window/Frame movement
Winner mode which saves window configurations is not really required
because, if a particular window/frame configuration is important it
can be saved to a register. Windmove and ace-window are two
alternatives for faster navigation between windows. Ace-window is the
winner here.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-ignore-current nil)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?k ?l))
  :bind ("C-x o" . ace-window))
#+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (setq explicit-shell-file-name "/bin/zsh")
  (setq explicit-zsh-args '("-l" "-i"))
)
#+END_SRC
* Coding system
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8))
#+END_SRC
* Spellchecker
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t
  :config
  (setq ispell-program-name "/usr/local/bin/ispell"))
#+END_SRC
* Xwidget
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :bind ("s-w" . xwidget-webkit-browse-url))  
#+END_SRC
* Sql
#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (add-to-list 'exec-path "/usr/local/bin/"))
#+END_SRC
