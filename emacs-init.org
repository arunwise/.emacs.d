#+TITLE: Emacs Configuration
#+AUTHOR: Arun

This configuration is largely based on the one used by [[https://gitlab.com/protesilaos/dotfiles][Protesilaos
Stavrou]]. Large chunks have been liberally copied from there.

* Platform
#+BEGIN_SRC emacs-lisp
(defvar macosx-p (eq system-type 'darwin) "True if using Mac OS X, nil otherwise")
#+END_SRC
* Shell
#+BEGIN_SRC emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
(setq explicit-shell-file-name "/bin/zsh")
(setq explicit-zsh-args '("-l" "-i"))
#+END_SRC
* Setup use-package

#+begin_src emacs-lisp
;; Setup `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Should set before loading `use-package'
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t))

(eval-when-compile
  (require 'use-package))
#+end_src

* Custom.el

#+BEGIN_SRC emacs-lisp
(use-package cus-edit
  :config
  (setq custom-file "~/.emacs.d/custom.el")

  (unless (file-exists-p custom-file)
    (write-region "" nil custom-file))

  (load custom-file)
)
#+END_SRC

* Uniquify

#+BEGIN_SRC emacs-lisp
(use-package uniquify
  :config
  (setq uniquify-buffer-name-style 'post-forward-angle-brackets)
  (setq uniquify-strip-common-suffix t)
  (setq uniquify-after-kill-buffer-p t))
#+END_SRC

* Ivy

#+BEGIN_SRC emacs-lisp
;; (use-package ivy
;;     :ensure t
;;     :config
;;     (ivy-mode 1)
;;     (setq ivy-use-virtual-buffers t)
;;     (setq ivy-count-format "(%d/%d) ")
;;     (setq ivy-read-action-function 'ivy-read-action-ivy) ; handle bug ivy-bibtex action menu https://github.com/abo-abo/swiper/issues/2397
;; )
#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp
(use-package helm
  :config
  ;; (require 'helm-config)
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (global-set-key (kbd "M-x") 'helm-M-x)
  (setq helm-M-x-fuzzy-match t)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (setq helm-buffers-fuzzy-matching t
	helm-recentf-fuzzy-match    t)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
  (helm-mode 1))
#+END_SRC

* Swiper

#+BEGIN_SRC emacs-lisp
;; (use-package swiper
;;     :ensure t
;;     :after ivy)
#+END_SRC

* GUI
Laptop preferred fonts (at 1680x1050 resolution):
- =Menlo-12=
4K monitor preferred fonts (at 3360x1890 scaled resolution):
- =Menlo-14=
#+BEGIN_SRC emacs-lisp

;; oddly the following are functions and not variables
(tool-bar-mode 0)
(scroll-bar-mode 0)
(line-number-mode t)
(column-number-mode t)
(show-paren-mode t)
;;

(setq inhibit-splash-screen t)	
(setq show-paren-delay 0)
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*" ,temporary-file-directory t)))

(defconst laptop-font "Menlo-12")
(defconst 4kmonitor-font "Menlo-14")
(defun set-font-based-on-monitor ()
  (interactive)
  (when window-system
    (if (<= (display-pixel-width) 1680)
	(set-face-attribute 'default nil :height 120)
      (set-face-attribute 'default nil :height 140))))
(set-font-based-on-monitor)

;; always create frames with full height
(add-to-list 'default-frame-alist '(fullscreen . fullheight))
(add-to-list 'default-frame-alist '(width . 100))
(add-to-list 'default-frame-alist '(left . 100))
#+END_SRC

* Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status))
#+END_SRC

* Org
** Basics
#+BEGIN_SRC emacs-lisp
(use-package org
    :config
    ;;agenda and notes
    (setq org-directory "~/org-files")
    (setq org-default-notes-file "~/org-files/inbox.org")
    (setq org-agenda-files '("~/org-files/gtd.org"))
    ;; global tag list
    (setq org-tag-alist '(("A" . ?a) ("L" . ?l)))
    ;; refile
    (setq org-refile-targets
        '(("~/org-files/gtd.org" :maxlevel . 2)
	  ("~/org-files/someday.org" :maxlevel . 2)
	  ("~/org-files/reference.org" :maxlevel . 2)))
    ;; don't want to refile under TODO entries
    (defun refile-target-predicate ()
      (not (nth 2 (org-heading-components))))
    (setq org-refile-target-verify-function 'refile-target-predicate)
    (setq org-todo-keywords
        '((sequence "TODO(t)" "Progress(p)" "Waiting(w)" "|" "DONE(d)" "CANCELED(c)")))
    :bind ("C-c l" . org-store-link))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(use-package org-capture
    :after org
    :config
    (setq org-capture-templates
        '(
	  ("n" "Note" entry (file "~/org-files/inbox.org")
	   "* %? \n%U")))
    :bind ("C-c c" . org-capture))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
(use-package org-agenda
    :after org
    :config
    (setq org-agenda-confirm-kill t)
    (setq org-agenda-show-all-dates t)
    :bind (("C-c a" . org-agenda)
        :map org-mode-map
        ("C-'" . nil)
        ("C-," . nil)))
#+END_SRC

** Source blocks
#+BEGIN_SRC emacs-lisp
(use-package org-src
    :after org
    :config
    (setq org-src-window-setup 'current-window)
    (setq org-src-fontify-natively t)
    (setq org-src-preserve-indentation t)
    (setq org-src-tab-acts-natively t)
    (setq org-edit-src-content-indentation 0)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((python . t)
       (ocaml . t))))
#+END_SRC

* Latex
#+BEGIN_SRC emacs-lisp
(use-package auctex
  :defer t
  :ensure t)
#+END_SRC

* Helm-bibtex
#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :ensure t
  :config
  (setq bibtex-completion-bibliography
	'("~/bibliography/bibliography.bib"))
  (setq bibtex-completion-library-path
	'("~/bibliography/files")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;;   (defun bibtex-completion-open-pdf-external (keys &optional fallback-action)
;;     (let ((bibtex-completion-pdf-open-function
;; 	   (lambda (fpath) (start-process "skim" "*ivy-bibtex-skim*" "open" "-a" "Skim" fpath))))
;;       (bibtex-completion-open-pdf keys fallback-action)))

;;   (ivy-bibtex-ivify-action bibtex-completion-open-pdf-external ivy-bibtex-open-pdf-external)

;;   (ivy-add-actions
;;    'ivy-bibtex
;;    '(("P" ivy-bibtex-open-pdf-external "Open PDF file in external viewer (if present)")))
;;   :bind ("s-b" . ivy-bibtex))
#+END_SRC

* Ibuffer
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :config
  :bind (("C-x C-b" . ibuffer)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ibuffer-projectile
  :ensure t
  :after ibuffer
  :config
  (defun ibuffer-projectile-groups ()
    (ibuffer-projectile-set-filter-groups)
    (unless (eq ibuffer-sorting-mode 'alphabetic)
      (ibuffer-do-sort-by-alphabetic)
      (ibuffer-do-sort-by-major-mode)))
  :hook (after-init . ibuffer-projectile-groups))
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :defer t
  :config
  (projectile-mode +1)
  (setq projectile-completion-system 'helm))
#+END_SRC

* Counsel-projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :ensure t
  :hook (after-init . counsel-projectile-mode)
  :bind ("s-p" . projectile-command-map))
#+END_SRC

* osx-location
#+BEGIN_SRC emacs-lisp
(defun set-lat-long ()
  (interactive)
  (setq calendar-latitude osx-location-latitude
	calendar-longitude osx-location-longitude))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package osx-location
  :if macosx-p
  :ensure t
  :init
  (add-hook 'osx-location-changed-hook #'set-lat-long)
  (osx-location-watch))
#+END_SRC

* Window/Frame movement
Winner mode which saves window configurations is not really required
because, if a particular window/frame configuration is important it
can be saved to a register. Windmove and ace-window are two
alternatives for faster navigation between windows. Ace-window is the
winner here.
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-ignore-current nil)
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?k ?l))
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
  :bind ("C-x o" . ace-window))
#+END_SRC
* Coding system
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+END_SRC
* Spellchecker
#+BEGIN_SRC emacs-lisp
(use-package ispell
  :ensure t
  :config
  (setq ispell-program-name "/usr/local/bin/ispell"))
#+END_SRC

* Language Server Protocol
#+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook (
	 (tex-mode . lsp)
	 (bibtex-mode . lsp)
	 (python-mode . lsp)
	 (lsp-mode . lsp-enable-which-key-integration))
  :commands lsp lsp-deferred)

;; optionally
(use-package lsp-ui :commands lsp-ui-mode)
;; if you are ivy user
;; (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
;; (use-package lsp-treemacs :commands lsp-treemacs-errors-list)

;; optionally if you want to use debugger
(use-package dap-mode)
(use-package dap-python)
(setq dap-python-executable "python3")

;; optional if you want which-key integration
(use-package which-key
    :config
    (which-key-mode))

;; lsp over tramp
(lsp-register-client
    (make-lsp-client :new-connection (lsp-tramp-connection "pylsp")
                     :major-modes '(python-mode)
                     :remote? t
                     :server-id 'pylsp-remote))
#+END_SRC
** Python mode
#+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure nil
  :custom
  (python-shell-interpreter "python3"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package python-docstring
  :ensure t
  :hook (python-mode . python-docstring-mode))
#+END_SRC

* Conda
#+BEGIN_SRC emacs-lisp
(use-package conda
  :ensure t
  :init
  (setq conda-anaconda-home "~/miniconda3")
  (setq conda-env-home-directory "~/miniconda3")
)
#+END_SRC

* Pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :magic ("%PDF" . pdf-view-mode)
  :config
  (pdf-tools-install :no-query)
)
#+END_SRC

* Merlin
#+BEGIN_SRC emacs-lisp
(use-package merlin
  :config
  (let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
    (when (and opam-share (file-directory-p opam-share))
      (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
      (autoload 'merlin-mode "merlin" nil t nil)
      (add-hook 'tuareg-mode-hook 'merlin-mode t)
      (add-hook 'caml-mode-hook 'merlin-mode t))))
#+END_SRC
